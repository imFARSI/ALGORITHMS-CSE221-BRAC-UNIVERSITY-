# -*- coding: utf-8 -*-
"""CSE221 Lab 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VG8CKU1VyZuIRwSw7AMBjK2XSnnzm1PI
"""

def find_two_sum(N, S, arr):
    l=0
    r=N -1
    while l<r:
        current_sum=arr[l]+arr[r]
        if current_sum==S:
            print(l+ 1, r+ 1)
            return
        elif current_sum<S:
            l+=1
        else:
            r-=1

    print(-1)
N, S = map(int, input().split())
arr = list(map(int, input().split()))
find_two_sum(N, S, arr)

def merge_sorted_lists(N, alice, M, bob):
    idx_a, idx_b=0, 0
    merged_list=[]
    while idx_a<N and idx_b<M:
        if alice[idx_a]<=bob[idx_b]:
            merged_list.append(alice[idx_a])
            idx_a+=1
        else:
            merged_list.append(bob[idx_b])
            idx_b+=1
    while idx_a<N:
        merged_list.append(alice[idx_a])
        idx_a+=1
    while idx_b<M:
        merged_list.append(bob[idx_b])
        idx_b+=1
    print(" ".join(map(str, merged_list)))
N =int(input())
alice=list(map(int, input().split()))
M =int(input())
bob=list(map(int, input().split()))
merge_sorted_lists(N, alice, M, bob)

def longest_subarray(N, K, arr):
    start=0
    sum_current=0
    max_len=0
    for end in range(N):
        sum_current+=arr[end]
        while sum_current>K and start<=end:
            sum_current-=arr[start]
            start+=1
        max_len=max(max_len, end-start+1)
    print(max_len)
N, K=map(int, input().split())
arr=list(map(int, input().split()))
longest_subarray(N, K, arr)



def bin(S):
    l, r=0, len(S)-1
    while l<=r:
        mid=(l+r)//2
        if S[mid]=='1':
            r=mid-1
        else:
            l=mid + 1
    print(l+1 if l<len(S) else -1)
T=int(input().strip())
for i in range(T):
    S=input().strip()
    bin(S)

def count_in_range(size, queries_count, nums, query_list):
    def find_lower(nums, val):
        left, right=0,len(nums)
        while left<right:
            mid=(left+right)//2
            if nums[mid]<val:
                left=mid+1
            else:
                right=mid
        return left
    def find_upper(nums, val):
        left, right=0, len(nums)
        while left<right:
            mid=(left+right)//2
            if nums[mid]<=val:
                left=mid+1
            else:
                right=mid
        return left
    for low, high in query_list:
        print(find_upper(nums, high)-find_lower(nums, low))
size, queries_count=map(int, input().split())
nums = list(map(int, input().split()))
query_list=[tuple(map(int, input().split())) for i in range(queries_count)]
count_in_range(size, queries_count, nums, query_list)
